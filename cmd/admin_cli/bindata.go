// Code generated by go-bindata.
// sources:
// config-data/db1.json
// config-data/db2.json
// config-data/server.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configDataDb1Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4f\x4b\x04\x31\x0c\xc5\xef\xfb\x29\x4a\x8e\xa2\xec\x2a\x08\xda\xab\x8a\x57\x41\x3d\x89\x94\x4c\x9b\x61\x8a\x9d\xb6\x34\xed\xae\x8b\xec\x77\x97\xce\x5f\x90\x3d\x78\x6b\x93\x97\x5f\xf2\xde\xcf\x46\x08\xf0\xa5\x57\xd6\x1b\xfa\x56\x89\xa2\xb3\x1a\x19\xa4\xd8\x5d\xd6\x56\x4b\x64\x54\x3e\x46\x02\x09\x8f\x0f\x2f\x30\x14\x0b\x93\xda\x5b\x3a\x54\x59\x4e\x85\x86\x22\x53\xda\x53\x02\x29\xa0\xcb\x39\xca\xed\x56\x87\xa2\xbb\x06\x99\xae\xc6\x96\xbc\xdb\xdd\x5f\x8f\x80\xa6\xe8\x2f\xca\x20\x21\x13\x67\x65\x30\xa3\x9a\x4a\x33\x3f\x79\xec\xa9\xc2\xce\x2b\x22\x32\x1f\x42\x32\x55\xb1\xbc\x87\x0e\x79\x6c\x1c\x29\xee\x30\x91\x99\x66\x14\x6a\x4d\x5c\xaf\x6d\xd1\xf1\x78\x6e\xf1\x5c\x62\x0c\x29\x53\x85\xd4\x18\x84\x00\x8c\x56\x91\x37\x31\x58\x9f\x79\x29\xaf\xd4\xc5\xd2\x0c\x6e\x5d\xe1\x6e\x4a\x61\xd0\x9e\x36\x42\x9c\x86\x05\x89\xf6\xac\x9c\xed\x6d\x06\x29\x6e\x6e\x77\x8b\x33\x06\x39\xad\x7b\x7e\x7f\x7a\x7d\x9b\x7f\x42\x80\xb1\x5c\xd7\x18\x90\x73\xaa\xe3\x55\xa6\xb7\x5e\xe9\x0e\xbd\x27\xc7\x20\x3f\xa6\x86\x10\x70\x01\xd3\xfb\x73\xdc\x3e\xce\x40\x1b\xc2\x59\xec\x62\xff\xff\xdc\x45\xbd\x46\x0e\x0d\x26\xf8\xe3\x16\x9d\x0b\x07\x45\x7d\xcc\x47\xb5\x2a\x87\x58\x4e\xbf\x01\x00\x00\xff\xff\xae\xfe\x0a\xa6\x64\x02\x00\x00")

func configDataDb1JsonBytes() ([]byte, error) {
	return bindataRead(
		_configDataDb1Json,
		"config-data/db1.json",
	)
}

func configDataDb1Json() (*asset, error) {
	bytes, err := configDataDb1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config-data/db1.json", size: 612, mode: os.FileMode(420), modTime: time.Unix(1536957931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDataDb2Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4e\x03\x31\x0c\x45\xf7\x3d\x45\xe4\x35\x0b\x40\x62\x93\x2d\x1c\x80\x1b\x58\x9e\xe4\x57\x13\x91\x49\xac\x38\xa1\x54\x68\xee\x8e\x3a\xa1\xea\xf6\xfd\xef\xe7\xff\x7b\x72\x8e\xca\xd8\x38\x95\x88\x1f\x6e\xd0\x9c\x82\x18\xf9\xe7\xa7\x5b\x72\x06\x22\xf7\xab\x82\x3c\x7d\xbc\x7f\xd2\x01\x97\x11\xbe\xd0\xc9\x53\x5c\x5e\x26\x41\x91\x25\x83\x6d\x95\x86\xc8\x33\x67\x09\x01\x66\xe4\x7b\x1b\x38\x5a\xa3\xd8\x50\xad\xad\x23\x92\xbf\x3d\x76\x8e\x44\x13\xa3\x44\xad\xa9\x74\xbb\xd3\x87\x31\xd4\x11\xd6\x45\x0c\x77\xe9\x39\x0f\x5b\xa7\xf3\xa8\xee\x27\xe7\xf6\xc3\xde\xf0\x6d\x9c\xd3\x96\x3a\xf9\xd7\xb7\x39\x5f\x72\xae\x17\xc6\xa6\xfd\xca\x2a\x66\x97\xda\xe2\xff\xf1\xfe\x17\x00\x00\xff\xff\x96\x56\xaf\x2e\xfa\x00\x00\x00")

func configDataDb2JsonBytes() ([]byte, error) {
	return bindataRead(
		_configDataDb2Json,
		"config-data/db2.json",
	)
}

func configDataDb2Json() (*asset, error) {
	bytes, err := configDataDb2JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config-data/db2.json", size: 250, mode: os.FileMode(420), modTime: time.Unix(1536881710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configDataServerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x4b\x6a\xc3\x30\x10\x86\xf7\x39\xc5\xf0\x2f\x4b\xc0\x69\x49\x21\x99\x1b\xf4\x0c\xa5\x98\x49\x3c\x56\x45\x65\x29\x48\x4a\xfa\xc2\x77\x2f\xb6\xd5\xa6\x06\xd3\x5d\x17\x42\xd2\x37\xff\x03\xe6\x73\x45\x04\x69\x3a\xeb\x1f\x7c\xd6\xd8\xca\x51\xc1\xe0\xed\x7e\x77\x8f\xf5\x30\xb3\x57\x4c\x23\xdf\x4e\xdc\x05\x63\xac\x37\xe0\x21\x61\xfa\xd7\xad\x75\x5a\x9f\x24\x3f\x83\x51\x5d\x24\x56\xb9\x3b\x55\xc9\xb8\x60\xd2\x68\x22\xc2\x31\xf8\x14\x9c\x7e\xdb\x8a\xd1\xe9\x45\x1d\x18\x8d\x1e\xce\xa6\x48\xcb\xe8\x45\xdf\x13\xf8\xb1\x20\x22\xdc\xa0\xbc\x9f\xc6\xbb\x2f\xc1\x1a\x63\x88\xbf\x62\xd5\xcb\xc1\x69\x03\xce\xf1\xac\x3f\x89\x31\x64\xc9\x36\xf8\xab\x90\x08\x9d\xbc\xd5\xc9\x7e\x28\xf8\x6e\xb3\x9e\x63\x31\x0a\xbe\xdd\x6d\x0a\xed\x67\x95\xaf\x12\xfd\xff\x34\xee\x97\x0b\xad\x6f\xc3\x52\x61\x2b\x2e\xe9\x4c\x39\x2d\xf2\x6f\xe9\x6a\x38\xfd\x57\x00\x00\x00\xff\xff\x9a\x8c\xd4\xad\x01\x02\x00\x00")

func configDataServerJsonBytes() ([]byte, error) {
	return bindataRead(
		_configDataServerJson,
		"config-data/server.json",
	)
}

func configDataServerJson() (*asset, error) {
	bytes, err := configDataServerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config-data/server.json", size: 513, mode: os.FileMode(420), modTime: time.Unix(1536953736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config-data/db1.json": configDataDb1Json,
	"config-data/db2.json": configDataDb2Json,
	"config-data/server.json": configDataServerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config-data": &bintree{nil, map[string]*bintree{
		"db1.json": &bintree{configDataDb1Json, map[string]*bintree{}},
		"db2.json": &bintree{configDataDb2Json, map[string]*bintree{}},
		"server.json": &bintree{configDataServerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

