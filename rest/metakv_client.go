package rest

import (
	"context"
	"fmt"
	"strings"

	msgrpc "github.com/couchbase/mobile-service/mobile_service_grpc"
	pkgerrors "github.com/pkg/errors"

)

// Wrapper around the GRPC client generated by the GRPC tooling.
type MetaKVClient struct {
	syncGateway *SyncGateway
	context     context.Context
}

// Create a new MetaKV Client
func NewMetaKVClient(bootstrapConfig BootstrapConfig) *MetaKVClient {

	return &MetaKVClient{
		syncGateway: NewSyncGateway(bootstrapConfig),
		context:     context.Background(),
	}
}

// Insert or update the key in MetaKV with the given value.  This is not CAS safe
// and may be a stale update, and clobber existing revisions.
func (mkv *MetaKVClient) Upsert(key string, value []byte) (err error) {

	// Get existing value at that key in order to get the metakv rev
	serverConfigKey, err := mkv.syncGateway.GrpcClient.MetaKVGet(mkv.context, &msgrpc.MetaKVPath{
		Path: key,
	})

	if err != nil {
		return err
	}

	if serverConfigKey.Rev == "" {
		// If no metakv rev, do an add
		_, err = mkv.syncGateway.GrpcClient.MetaKVAdd(mkv.context, &msgrpc.MetaKVPair{
			Path:  key,
			Value: value,
		})

	} else {
		// If there is a metakv rev, do a set
		_, err = mkv.syncGateway.GrpcClient.MetaKVSet(mkv.context, &msgrpc.MetaKVPair{
			Path:  key,
			Rev:   serverConfigKey.Rev,
			Value: value,
		})
	}

	return pkgerrors.Wrapf(err, "Error upserting key: %v", key)


}

func (mkv *MetaKVClient) ListAllChildren(key string) (metakvPairs []*msgrpc.MetaKVPair, err error) {

	if !strings.HasSuffix(key, "/") {
		return nil, fmt.Errorf("Invalid key: %v does not end in a '/'", key)
	}

	metaKvPairs, err := mkv.syncGateway.GrpcClient.MetaKVListAllChildren(mkv.context, &msgrpc.MetaKVPath{Path: key})
	if err != nil {
		return nil, pkgerrors.Wrapf(err, "Error listing children of key: %v", key)
	}
	return metaKvPairs.Items, err

}

func (mkv *MetaKVClient) Get(key string) (value []byte, err error) {

	metaKvPair, err := mkv.syncGateway.GrpcClient.MetaKVGet(mkv.context, &msgrpc.MetaKVPath{Path: key})
	if err != nil {
		return nil, pkgerrors.Wrapf(err, "Error getting key: %v", key)
	}
	return metaKvPair.Value, nil

}

func (mkv *MetaKVClient) Delete(key string) (err error) {

	serverConfigKey, err := mkv.syncGateway.GrpcClient.MetaKVGet(mkv.context, &msgrpc.MetaKVPath{
		Path: key,
	})

	if err != nil {
		return pkgerrors.Wrapf(err, "Error deleting key: %v", key)
	}

	_, err = mkv.syncGateway.GrpcClient.MetaKVDelete(mkv.context, &msgrpc.MetaKVPair{
		Path: key,
		Rev:  serverConfigKey.Rev,
	})

	return pkgerrors.Wrapf(err, "Error deleting key: %v", key)

}

func (mkv *MetaKVClient) RecursiveDelete(key string) (err error) {

	_, err = mkv.syncGateway.GrpcClient.MetaKVRecursiveDelete(mkv.context, &msgrpc.MetaKVPath{
		Path: key,
	})

	return pkgerrors.Wrapf(err, "Error recursively deleting key: %v", key)

}

// /mobile/gateway/config/databases/database-1 -> database-1
func MetaKVLastItemPath(path string) (string, error) {
	if path == "" {
		return "", fmt.Errorf("Cannot get last item from empty path")
	}
	components := strings.Split(path, "/")
	if len(components) == 0 {
		return "", fmt.Errorf("Not enough components found in path: %v", path)
	}
	return components[len(components)-1], nil

}
